


import javafx.application.Application;
import javafx.geometry.Orientation;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.geometry.HPos;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.ListView;
import javafx.scene.layout.*;
import javafx.scene.paint.Color;
import javafx.scene.control.ToggleButton;
import javafx.scene.control.ToggleGroup;
import javafx.scene.control.Separator;
import javafx.scene.text.*;
import javafx.scene.control.RadioButton;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.*;
import javafx.stage.Stage;
import javafx.geometry.*;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import java.util.*;


public class Main extends Application {
    Scene scene1, scene2, scene3, scene4, scene5;

    final ObservableList<String> selected = FXCollections.observableArrayList();
    final ObservableList<String> canTake = FXCollections.observableArrayList();
    final ObservableList<String> wantToTake = FXCollections.observableArrayList();
    final ArrayList<String> scene3Input = new ArrayList<String>();

    ListOfCourses hasTaken = new ListOfCourses();
    boolean isValidInput = false;

    Button logo = new Button();
    Alert alertBox = new Alert(AlertType.INFORMATION);
    String imageUrl = "https://live.staticflickr.com/65535/49154935676_3bb89d5517_o.png" ;

    @Override
    public void start(Stage primaryStage) {
        primaryStage.setTitle("GMyoUPLAN Computer Science Class Scheduler");

        FlowPane border = new FlowPane();
        border.setPadding(new Insets(10, 10, 10, 10));
        border.setStyle("-fx-background-color: #1e6e17;");
        border.setHgap(5);



        Image image = new Image(imageUrl,350,250,false,true);
        ImageView imageView = new ImageView(image);
        Button logo = new Button();
        logo.setGraphic(imageView);
        logo.setStyle("-fx-background-color: white");


        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 2, 50));
        grid.setVgap(2);
        grid.setHgap(1);
        grid.setPrefHeight(200);


        Text description = new Text("A Scheduler aimed for assisting students plan Computer Science classes.");
        description.setFill(Color.WHITE);
        Font font = Font.font("Abel", FontWeight.EXTRA_BOLD, 25);
        description.setFont(font);
        grid.add(description, 3, 0);

        Text featureinfo = new Text("Features include:");
        featureinfo.setFill(Color.WHITE);
        Font font1 = Font.font("Abel",FontWeight.EXTRA_BOLD, 18);
        featureinfo.setFont(font1);
        grid.add(featureinfo, 3, 3);

        Text feature = new Text("An assessment of what classes the user can take immediately next semester.");
        feature.setFill(Color.WHITE);
        Font font2 = Font.font("Abel", 17);
        feature.setFont(font2);
        grid.add(feature, 3, 4);


        Text feature1 = new Text("An analysis of the userâ€™s interest and suggests what technical electives they should take.");
        feature1.setFill(Color.WHITE);
        Font font3 = Font.font("Abel", 17);
        feature1.setFont(font3);
        grid.add(feature1, 3, 7);
        grid.setStyle("-fx-background-color: #1e6e17;");

        Text creators = new Text("Created by: Geraldine Chen, Leilani Dang, Susan Ngo ");
        creators.setFill(Color.WHITE);
        Font font4 = Font.font("Actor", 17);
        creators.setFont(font4);
        grid.add(creators, 3, 9);
        grid.setStyle("-fx-background-color: #1e6e17;");

        Button start = new Button("Start");
        start.setStyle("-fx-font-size: 2em; ");
        grid.add(start,60,10);

        //Testing Scene5, always to bypass answering 17 questions in order to test scene5
        Button skip = new Button();

        BorderPane homePane = new BorderPane();
        homePane.setStyle("-fx-background-color: white");
        homePane.setCenter(logo);
        homePane.setBottom(grid);
        homePane.setTop(border);
        homePane.setLeft(skip);

        start.setOnAction(e -> primaryStage.setScene(scene2));


        skip.setOnAction( e -> primaryStage.setScene(scene5)
        );


        scene1= new Scene(homePane, 1250, 650);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //scene2: Class Input

        VBox instructionsCI = new VBox();
        instructionsCI.setPadding(new Insets(50, 30, 10, 10));

        Text titleS2 = new Text("Instructions");
        Font fontT = Font.font("Verdana", FontWeight.BOLD, 20);
        titleS2.setFont(fontT);

        Text label2 = new Text("Select all the courses you have taken so far from the Course List.\n"+
                "\"Course List\" is a list of all Computer Science classes and all their corresponding classes" +
                "\n"+
                "\"Selected\" will be the list of all the courses you have taken already" +
                "\n"+
                "\n"+
                "To add classes to \"Selected\" : "+
                "\n"+
                "Select the class from Course List and then click \">\" button " +
                "if you made a mistake, you can simply remove the class by clicking the \"<\" button" +
                "\n" +
                "\n"+
                "When you are done, click \"Check\""+
                "\n"+
                "Important Reminders to Keep in Mind:" +
                "\n---------------------------------------"+
                "\n"+
                "Grades\n" +
                "Students must earn a C or better in any course intended to satisfy a prerequisite for a computer science course.\n" +
                "Computer science majors may not use more than one."

                );
        label2.setWrappingWidth(280);

        instructionsCI.getChildren().addAll(titleS2,label2);

        Alert alertSelect = new Alert(AlertType.INFORMATION);
        BorderPane root = new BorderPane();


        //Border on Top
        HBox top2 = new HBox();
        top2.setPadding(new Insets(10, 10, 10, 10));
        top2.setStyle("-fx-background-color: #1e6e17;");


        //Border on Bottom
        HBox logo2Box = new HBox();
        logo2Box.setPadding(new Insets(15, 12, 15, 12));
        logo2Box.setSpacing(5);
        logo2Box.setStyle("-fx-background-color: #1e6e17;");



        //Button Logo
        Image image2 = new Image(imageUrl,110,95,false,true);
        ImageView imageView2 = new ImageView(image2);
        Button logo2 = new Button("",imageView2);
        logo2.setStyle("-fx-background-color: white");
        logo2Box.setAlignment(Pos.CENTER_RIGHT);
        logo2Box.getChildren().add(logo2);



        //TreeView : Class List Resourse to look up classes
        TreeItem rootItem = new TreeItem("Resource Class List");

        TreeItem CS110Item = new TreeItem("CS 110");
        CS110Item.getChildren().add(new TreeItem("None"));
        rootItem.getChildren().add(CS110Item);

        TreeItem CS112Item = new TreeItem("CS 112");
        CS112Item.getChildren().add(new TreeItem("MATH 104 or MATH 105 or MATH 113"));
        rootItem.getChildren().add(CS112Item);

        TreeItem CS211Item = new TreeItem("CS 211");
        CS211Item.getChildren().add(new TreeItem("CS 112"));
        CS211Item.getChildren().add(new TreeItem("MATH 113"));
        rootItem.getChildren().add(CS211Item);

        TreeItem CS262Item = new TreeItem("CS 262");
        CS262Item.getChildren().add(new TreeItem("CS 110 or CS 101"));
        CS262Item.getChildren().add(new TreeItem("CS 112"));
        CS262Item.getChildren().add(new TreeItem("CS 211 or CS 222"));
        CS262Item.getChildren().add(new TreeItem("MATH 113"));
        rootItem.getChildren().add(CS262Item);

        TreeItem CS306Item = new TreeItem("CS 306");
        CS306Item.getChildren().add(new TreeItem("CS 110"));
        rootItem.getChildren().add(CS306Item);

        TreeItem CS310Item = new TreeItem("CS 310");
        CS310Item.getChildren().add(new TreeItem("CS 112"));
        CS310Item.getChildren().add(new TreeItem("CS 211"));
        CS310Item.getChildren().add(new TreeItem("MATH 113"));
        rootItem.getChildren().add(CS310Item);

        TreeItem CS321Item = new TreeItem("CS 321");
        CS321Item.getChildren().add(new TreeItem("CS 112"));
        CS321Item.getChildren().add(new TreeItem("CS 211"));
        CS321Item.getChildren().add(new TreeItem("CS 310"));
        CS321Item.getChildren().add(new TreeItem("MATH 113"));
        CS321Item.getChildren().add(new TreeItem("ENGH 302 or (HNRS 110 and (HNRS 122 or 130 or 230 or 240))"));
        rootItem.getChildren().add(CS321Item);

        TreeItem CS330Item = new TreeItem("CS 330");
        CS330Item.getChildren().add(new TreeItem("CS 112"));
        CS330Item.getChildren().add(new TreeItem("CS 211"));
        CS330Item.getChildren().add(new TreeItem("MATH 113"));
        CS330Item.getChildren().add(new TreeItem("MATH 125"));
        rootItem.getChildren().add(CS330Item);

        TreeItem CS367Item = new TreeItem("CS 367");
        CS367Item.getChildren().add(new TreeItem("CS 110"));
        CS367Item.getChildren().add(new TreeItem("CS 112"));
        CS367Item.getChildren().add(new TreeItem("CS 211"));
        CS367Item.getChildren().add(new TreeItem("CS 262 or CS 222"));
        CS367Item.getChildren().add(new TreeItem("MATH 113"));
        CS367Item.getChildren().add(new TreeItem("MATH 125"));
        rootItem.getChildren().add(CS367Item);

        TreeItem CS471Item = new TreeItem("CS 471");
        CS471Item.getChildren().add(new TreeItem("CS 112"));
        CS471Item.getChildren().add(new TreeItem("CS 211"));
        CS471Item.getChildren().add(new TreeItem("CS 262 or CS 222"));
        CS471Item.getChildren().add(new TreeItem("CS 310"));
        CS471Item.getChildren().add(new TreeItem("CS 367 or ECE 445"));
        CS471Item.getChildren().add(new TreeItem("MATH 113"));
        CS471Item.getChildren().add(new TreeItem("MATH 125"));
        rootItem.getChildren().add(CS471Item);

        TreeItem CS483Item = new TreeItem("CS 483");
        CS483Item.getChildren().add(new TreeItem("CS 112"));
        CS483Item.getChildren().add(new TreeItem("CS 211"));
        CS483Item.getChildren().add(new TreeItem("CS 310"));
        CS483Item.getChildren().add(new TreeItem("CS 330"));
        CS483Item.getChildren().add(new TreeItem("MATH 113"));
        CS483Item.getChildren().add(new TreeItem("MATH 125"));
        rootItem.getChildren().add(CS483Item);

        TreeItem MATH113Item = new TreeItem("MATH 113");
        MATH113Item.getChildren().add(new TreeItem("MATH 104 or MATH 105"));
        rootItem.getChildren().add(MATH113Item);

        TreeItem MATH114Item = new TreeItem("MATH 114");
        MATH114Item.getChildren().add(new TreeItem("(MATH 123 and MATH 125) or MATH 113"));
        rootItem.getChildren().add(MATH114Item);

        TreeItem MATH125Item = new TreeItem("MATH 125");
        MATH125Item.getChildren().add(new TreeItem("MATH 105 or MATH 108 or MATH 113"));
        rootItem.getChildren().add(MATH125Item);

        TreeItem MATH203Item = new TreeItem("MATH 203");
        MATH203Item.getChildren().add(new TreeItem("(MATH 113 and MATH 114) or MATH 116)"));
        rootItem.getChildren().add(MATH203Item);

        TreeItem MATH213Item = new TreeItem("MATH 213");
        MATH213Item.getChildren().add(new TreeItem("(MATH 113 and MATH 114) or MATH 116)"));
        rootItem.getChildren().add(MATH213Item);

        TreeItem STAT344Item = new TreeItem("STAT 344");
        STAT344Item.getChildren().add(new TreeItem("(MATH 113 and MATH 114) or MATH 116)"));
        rootItem.getChildren().add(STAT344Item);


        //TreeView to Display
        TreeView treeView = new TreeView();
        treeView.setRoot(rootItem);

        VBox treeVbox = new VBox();
        Text classResource = new Text("Class Look Up Resource Tool");
        Font fontCR = Font.font("Verdana", FontWeight.BOLD, 13);
        classResource.setFont(fontCR);

        Text classResource1 = new Text("Use this tool to look up prerequisites");
        Font fontCR1 = Font.font("Verdana", FontWeight.THIN, 13);
        classResource1.setFont(fontCR1);
        treeVbox.getChildren().addAll(classResource,classResource1);
        treeVbox.getChildren().add(treeView);
        treeVbox.setMaxWidth(200);
        treeVbox.setPadding(new Insets(28, 5, 10, 5));

        BorderPane.setMargin(treeVbox, new Insets(10, 10, 10, 10));



        //////////////////////////////////////////

        // Class Selection Portion
        GridPane gridpane = new GridPane();
        gridpane.setPadding(new Insets(45,10,5,5));
        gridpane.setHgap(10);
        gridpane.setVgap(10);
        ColumnConstraints column1 = new ColumnConstraints(250, 300,
                Double.MAX_VALUE);
        ColumnConstraints column2 = new ColumnConstraints(80);
        ColumnConstraints column3 = new ColumnConstraints(200, 250,
                Double.MAX_VALUE);
        //column1.setHgrow(Priority.ALWAYS);
        //column3.setHgrow(Priority.ALWAYS);
        gridpane.getColumnConstraints().addAll(column1, column2, column3);

        Label courseList = new Label("Course List");
        GridPane.setHalignment(courseList, HPos.CENTER);
        gridpane.add(courseList, 0, 0);

        Label selectedLbl = new Label("Selected");
        gridpane.add(selectedLbl, 2, 0);
        GridPane.setHalignment(selectedLbl, HPos.CENTER);

        // Course List
        final ObservableList<String> classList = FXCollections
                .observableArrayList(
                        "COMM 100",
                        "CS 101",
                        "CS 105",
                        "CS 110",
                        "CS 112",
                        "CS 211",
                        "CS 222",
                        "CS 306",
                        "CS 310",
                        "CS 321",
                        "CS 330",
                        "CS 367",
                        "CS 471",
                        "CS 483",
                        "ECE 445",
                        "ENGHH 302",
                        "HNRS 110",
                        "HNRS 122",
                        "HNRS 130",
                        "HNRS 131",
                        "HNRS 230",
                        "HNRS 240",
                        "MATH 104",
                        "MATH 105",
                        "MATH 108",
                        "MATH 113",
                        "MATH 114",
                        "MATH 116",
                        "MATH 123",
                        "MATH 124",
                        "MATH 125",
                        "MATH 203",
                        "MATH 213",
                        "STAT 344");
        final ListView<String> courseListView = new ListView<>(classList);
        gridpane.add(courseListView, 0, 1);

        final ListView<String> heroListView = new ListView<>(selected);
        gridpane.add(heroListView, 2, 1);

        Button sendRightButton = new Button(" > ");
        sendRightButton.setOnAction((ActionEvent event) -> {
            String potential = courseListView.getSelectionModel()
                    .getSelectedItem();
            if (potential != null) {
               courseListView.getSelectionModel().clearSelection();
                classList.remove(potential);
                selected.add(potential);
            }
        });

        Button sendLeftButton = new Button(" < ");
        sendLeftButton.setOnAction((ActionEvent event) -> {
            String s = heroListView.getSelectionModel().getSelectedItem();
            if (s != null) {
                heroListView.getSelectionModel().clearSelection();
                selected.remove(s);
                classList.add(s);

            }
        });

        VBox vbox = new VBox(10);
        vbox.getChildren().addAll(sendRightButton, sendLeftButton);

        gridpane.add(vbox, 1, 1);

        GridPane.setVgrow(root, Priority.ALWAYS);

        Button check = new Button("check");
        check.setStyle("-fx-text-fill: #0000ff; -fx-font-size: 1.1em; ");

        check.setWrapText(true);
        vbox.getChildren().add(check);

        Button cont1 = new Button("Continue");
        cont1.setStyle("-fx-text-fill: #f51b14; -fx-font-size: 1em; ");

        cont1.setVisible(false);
        vbox.getChildren().add(cont1);

        check.setOnAction(e ->
        {
            hasTaken.clear();
            System.out.println(selected);

            Collections.sort(selected);

            //cs 110
            if(selected.contains("CS 110")){
                String [] cs110PR = {"none"};
                hasTaken.addCourse(new Course ("CS 110", 3, cs110PR));}
            //cs 112
            if(selected.contains("CS 112")){
                String [] cs112PR = {"MATH 113"};
                hasTaken.addCourse(new Course("CS 112", 4, cs112PR));}
            //cs 211
            if(selected.contains("CS 211")){
                String [] cs211PR = {"CS 112", "MATH 113"};
                hasTaken.addCourse(new Course("CS 211", 3, cs211PR));}
            //cs 262
            if(selected.contains("CS 262")){
                String [] cs262PR = {"CS 110", "CS 112", "CS 211", "MATH 113"};
                hasTaken.addCourse(new Course("CS 262", 3, cs262PR));}
            //cs 306
            if(selected.contains("CS 306")){
                String [] cs306PR = {"CS 110"};
                hasTaken.addCourse(new Course("CS 306", 3, cs306PR));}
            //cs 310
            if(selected.contains("CS 310")){
                String [] cs310PR = {"CS 112", "CS 211", "MATH 113"};
                hasTaken.addCourse(new Course("CS 310", 3, cs310PR));}
            //cs 321
            if(selected.contains("CS 321")){
                String [] cs321PR = {"CS 112", "CS 211", "CS 310", "MATH 113"};
                hasTaken.addCourse(new Course ("CS 321", 3, cs321PR));}
            //cs 330
            if(selected.contains("CS 330")){
                String [] cs330PR = {"CS 112","CS 211", "MATH 113", "MATH 125"};
                hasTaken.addCourse(new Course("CS 330", 3, cs330PR));}
            //cs 367
            if(selected.contains("CS 367")){
                String [] cs367PR = {"CS 110", "CS 112", "CS 211","CS 262", "MATH 125"};
                hasTaken.addCourse(new Course("CS 367", 4, cs367PR));}
            //cs 471
            if(selected.contains("CS 471")){
                String [] cs471PR = {"CS 110", "CS 112", "CS 211", "CS 262", "CS 310", "CS 367", "MATH 113"};
                hasTaken.addCourse(new Course("CS 471", 3, cs471PR));}
            //cs 483
            if(selected.contains("CS 483")){
                String [] cs483PR = {"CS 112", "CS 211", "CS 310", "CS 330", "MATH 113", "MATH 125"};
                hasTaken.addCourse(new Course("CS 483", 3, cs483PR));}
            //math 113
            if(selected.contains("MATH 113")){
                String [] math113PR = {"none"};
                hasTaken.addCourse(new Course ("MATH 113", 4, math113PR));}
            //math 114
            if(selected.contains("MATH 114")){
                String [] math114PR = {"MATH 113"};
                hasTaken.addCourse(new Course ("MATH 114", 4, math114PR));}
            //math 125
            if(selected.contains("MATH 125")){
                String [] math125PR = {"MATH 113"};
                hasTaken.addCourse(new Course ("MATH 125", 3, math125PR));}
            //math 203
            if(selected.contains("MATH 203")){
                String [] math203PR = {"MATH 113", "MATH 114"};
                hasTaken.addCourse(new Course ("MATH 203", 3, math203PR));}
            //math 213
            if(selected.contains("MATH 213")){
                String [] math213PR = {"MATH 113", "MATH 114"};
                hasTaken.addCourse(new Course ("MATH 213", 3, math213PR));}
            //stat 344
            if(selected.contains("STAT 344")){
                String [] stat344PR = {"MATH 113", "MATH 114"};
                hasTaken.addCourse(new Course ("STAT 344", 3, stat344PR));}

            //Validate Classes
            if(validateClasses()){

                if(isValidInput && hasTaken.size() >= 0)
                    cont1.setVisible(true);
                    check.setVisible(false);

                //cs 110
                if(!hasTaken.contains("CS 110"))
                    canTake.add("CS 110");
                //cs 112
                if((hasTaken.contains("MATH 104") || hasTaken.contains("MATH 105") || hasTaken.contains("MATH 113"))
                        && !hasTaken.contains("CS 112"))
                    canTake.add("CS 112");
                //cs 211
                if(hasTaken.contains("CS 112") && !hasTaken.contains("CS 211"))
                    canTake.add("CS 211");
                //cs 262
                if( (hasTaken.contains("CS 101") || hasTaken.contains("CS 110")) && (hasTaken.contains("CS 211") || hasTaken.contains("CS 222")) && !hasTaken.contains("CS 262"))
                    canTake.add("CS 262");
                //cs 306
                if( (hasTaken.contains("COMM 100") && hasTaken.contains("ENGH 302"))
                        || (hasTaken.contains("HNRS 110") && (hasTaken.contains("HNRS 122")
                        || hasTaken.contains("HNRS 130") || hasTaken.contains("HNRS 131")
                        || hasTaken.contains("HNRS 230") || hasTaken.contains("HNRS 240")))
                        && (hasTaken.contains("CS 105") || hasTaken.contains("CS 110"))
                        && hasTaken.contains("CS 306") )
                    canTake.add("CS 306");
                //cs 310
                if( hasTaken.contains("CS 211") && hasTaken.contains("MATH 113") && !hasTaken.contains("CS 310"))
                    canTake.add("CS 310");
                //cs 321
                if( hasTaken.contains("CS 310") && (hasTaken.contains("ENGH 302")
                        || (hasTaken.contains("HNRS 110") && (hasTaken.contains("HNRS 122")
                        || hasTaken.contains("HNRS 130") || hasTaken.contains("HNRS 131")
                        || hasTaken.contains("HNRS 240"))))
                        && !hasTaken.contains("CS 321") )
                    canTake.add("CS 321");
                //cs 330
                if(hasTaken.contains("CS 211") && hasTaken.contains("MATH 125") && !hasTaken.contains("CS 330") )
                    canTake.add("CS 330");
                //cs 367
                if( (hasTaken.contains("CS 222") || hasTaken.contains("CS 262")) && hasTaken.contains("MATH 125") && hasTaken.contains("CS 110")
                        && !hasTaken.contains("CS 367"))
                    canTake.add("CS 367");
                //cs 471
                if(hasTaken.contains("CS 310") && (hasTaken.contains("CS 367") || hasTaken.contains("ECE 445"))
                        && !(hasTaken.contains("CS 471")))
                    canTake.add("CS 471");
                //cs 483
                if( hasTaken.contains("CS 310") && hasTaken.contains("CS 330") && hasTaken.contains("MATH 125")
                        && !hasTaken.contains("CS 483"))
                    canTake.add("CS 483");
                //math 113
                if( (hasTaken.contains("MATH 104") || hasTaken.contains("MATH 105"))
                        && !hasTaken.contains("MATH 113"))
                    canTake.add("MATH 113");
                //math 114
                if( (hasTaken.contains("MATH 104") && hasTaken.contains("MATH 105")) || hasTaken.contains("MATH 113")
                        && !hasTaken.contains("MATH 114"))
                    canTake.add("MATH 114");
                //math 125
                if( (hasTaken.contains("MATH 105") || hasTaken.contains("MATH 108") || hasTaken.contains("MATH 113"))
                        && !hasTaken.contains("MATH 125"))
                    canTake.add("MATH 125");
                //math 203
                if( (hasTaken.contains("MATH 114") || hasTaken.contains("MATH 116"))
                        && !hasTaken.contains("MATH 203"))
                    canTake.add("MATH 203");
                //math 213
                if( (hasTaken.contains("MATH 114") || hasTaken.contains("MATH 116"))
                        && !hasTaken.contains("MATH 213"))
                    canTake.add("MATH 213");
                //stat 344
                if( (hasTaken.contains("MATH 114") || hasTaken.contains("MATH 116"))
                        && !hasTaken.contains("STAT 344"))
                    canTake.add("STAT 344");

            }

            System.out.println(canTake);
        });

        //Logo Action: Reset Scene2
        logo2.setOnAction(e -> {
            classList.addAll(selected);
            Collections.sort(classList);
            selected.clear();
            canTake.clear();
            cont1.setVisible(false);
            check.setVisible(true);
            primaryStage.close();
            primaryStage.setScene(scene1);
            primaryStage.show();

        });

        // Continue Button
        cont1.setOnAction(e ->primaryStage.setScene(scene3));

        //BorderPane assignments
        root.setTop(top2);
        root.setBottom(logo2Box);
        root.setLeft(treeVbox);
        root.setCenter(gridpane);
        root.setRight(instructionsCI);

        scene2 = new Scene(root, 1250, 650);
        root.prefHeightProperty().bind(scene2.heightProperty());
        root.prefWidthProperty().bind(scene2.widthProperty());


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //Scene 3: Questions

        BorderPane root3 = new BorderPane();


        //Border on Top
        HBox top3 = new HBox();
        top3.setPadding(new Insets(10, 10, 10, 10));
        top3.setStyle("-fx-background-color: #1e6e17;");


        //Border on Bottom
        HBox logo3Box = new HBox();
        logo3Box.setPadding(new Insets(15, 12, 15, 12));
        logo3Box.setSpacing(5);
        logo3Box.setStyle("-fx-background-color: #1e6e17;");



        //Button Logo
        Image image3 = new Image(imageUrl,110,95,false,true);
        ImageView imageView3 = new ImageView(image3);
        Button logo3 = new Button("",imageView3);
        logo3.setStyle("-fx-background-color: white");
        logo3Box.setAlignment(Pos.CENTER_RIGHT);
        logo3Box.getChildren().add(logo3);




        Label label3 = new Label("Answer a few questions to find out what computer science classes you are most interested in:");
        Separator separator = new Separator(Orientation.HORIZONTAL);
        Separator separator1 = new Separator(Orientation.HORIZONTAL);
        Alert alert = new Alert(AlertType.INFORMATION);



        VBox layout3= new VBox(5);
        layout3.getChildren().add(label3);
        layout3.getChildren().add(separator1);
        layout3.setPadding(new Insets(10));
        layout3.setSpacing(5);


        Text q = new Text("Which of the following are you most interested in:");
        q.setFont(Font.font("verdana", FontWeight.BOLD, FontPosture.REGULAR, 15));

        layout3.getChildren().add(q);

        // Creating a ToggleGroup
        ToggleGroup group = new ToggleGroup();

        // Creating new Toggle buttons.
        RadioButton CSTcp = new RadioButton("CS 455");
        Text titleCSTcp= new Text("Network protocols such as TCP");
        titleCSTcp.setFont(Font.font("verdana", FontWeight.BOLD, FontPosture.REGULAR, 12));
        Text labelCSTcp = new Text("Computer Communications and Networking.\nTopics include role of various media and software components, \n local and wide area network protocols, network performance, and emerging advanced commercial technologies.");

        RadioButton CSCryp = new RadioButton("CS 468");
        Text titleCSCryp= new Text("Cryptography and Security Development");
        titleCSCryp.setFont(Font.font("verdana", FontWeight.BOLD, FontPosture.REGULAR, 12));
        Text labelCSCryp = new Text("Secure Programming and Systems\n Topics include security and cryptography basics, vulnerability analysis,\n secure software development, and distributed system security");


        RadioButton CSSysInteg = new RadioButton("CS 475");
        Text titleCSSysInteg= new Text("System Integration and Multithreading Concepts");
        titleCSSysInteg.setFont(Font.font("verdana", FontWeight.BOLD, FontPosture.REGULAR, 12));
        Text labelCSSysInteg = new Text("Concurrent and Distributed Systems \n Topics include concurrent programming, synchronization, multithreading, \n local and wide-area network protocols, distributed computation, systems integration, and techniques for expressing coarse grained parallelism at the application level");

        // Set toggle group
        // In a group, maximum only
        // one button is selected
        CSTcp.setToggleGroup(group);
        CSCryp.setToggleGroup(group);
        CSSysInteg.setToggleGroup(group);

        CSTcp.setUserData("CS 455: Computer Communications and Networking");
        CSCryp.setUserData("CS 468: Secure Programming and Systems");
        CSSysInteg.setUserData("CS 475: Concurrent and Distributed Systems");
        layout3.getChildren().addAll(titleCSTcp, labelCSTcp,CSTcp,titleCSCryp,labelCSCryp,CSCryp,titleCSSysInteg, labelCSSysInteg,CSSysInteg, separator);



        Button button3 = new Button("Submit");
        Button cont = new Button("Continue");

        button3.setVisible(true);
        cont.setVisible(false);

        button3.setOnAction(e ->
        {

            ToggleButton selectedToggleButton =
                    (ToggleButton) group.getSelectedToggle();
            System.out.println(selectedToggleButton);
            if (selectedToggleButton == null){

                alert.setTitle("Selection Error");
                alert.setHeaderText("Question was not answered.");
                alert.setContentText("Please answer the question before clicking submit.");

                alert.showAndWait();}
            else{
                boolean isSelectedTcp = CSTcp.isSelected();
                if (CSTcp.isSelected() == true){
                    scene3Input.add("CS 455");
                }
                else if (CSCryp.isSelected() == true){
                    scene3Input.add("CS 468");}
                else{
                    scene3Input.add("CS 475");}
                button3.setVisible(false);
                cont.setVisible(true);
                System.out.println(selected);}
        });



        layout3.getChildren().add(button3);


        layout3.getChildren().add(cont);

        cont.setOnAction(e -> primaryStage.setScene(scene4));


        logo3.setOnAction(e -> {
            classList.addAll(selected);
            Collections.sort(classList);
            selected.clear();
            canTake.clear();
            cont1.setVisible(false);
            check.setVisible(true);
            button3.setVisible(true);
            cont.setVisible(false);
            CSTcp.setSelected(false);
            CSCryp.setSelected(false);
            CSSysInteg.setSelected(false);
            scene3Input.clear();
            primaryStage.close();
            primaryStage.setScene(scene1);
            primaryStage.show();

        });

        root3.setTop(top3);
        root3.setBottom(logo3Box);
        root3.setCenter(layout3);



        scene3 = new Scene(root3, 1250, 650);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //Scene 4: Question Part2

        BorderPane root41 = new BorderPane();


        Alert alert4 = new Alert(AlertType.INFORMATION);

        //Border on Top
        HBox top4 = new HBox();
        top4.setPadding(new Insets(10, 10, 10, 10));
        top4.setStyle("-fx-background-color: #1e6e17;");

        //Border on Bottom
        HBox logo4Box = new HBox();
        logo4Box.setPadding(new Insets(15, 12, 15, 12));
        logo4Box.setSpacing(5);
        logo4Box.setStyle("-fx-background-color: #1e6e17;");



        //Button Logo
        Image image4 = new Image(imageUrl,110,95,false,true);
        ImageView imageView4 = new ImageView(image4);
        Button logo4 = new Button("",imageView4);
        logo4.setStyle("-fx-background-color: white");
        logo4Box.setAlignment(Pos.CENTER_RIGHT);
        logo4Box.getChildren().add(logo4);


        VBox layout4 = new VBox(4);
        ScrollPane scrollPane = new ScrollPane(layout4);
        scrollPane.setFitToHeight(true);
        BorderPane root4 = new BorderPane(scrollPane);
        Text q4 = new Text("Are you interested in the following?");
        q4.setFont(Font.font("verdana", FontWeight.BOLD, FontPosture.REGULAR, 15));

        layout4.getChildren().addAll(q4);

        //cs 425
        ToggleGroup group1 = new ToggleGroup();
        Text CS425txt = new Text("1. Game Programming I. Introduction to technologies and techniques used in modern computer games.");
        RadioButton yes1 = new RadioButton("Yes");
        RadioButton no1 = new RadioButton("No");

        yes1.setToggleGroup(group1);
        no1.setToggleGroup(group1);
        layout4.getChildren().addAll(CS425txt, yes1, no1);

        //cs 454
        ToggleGroup group2 = new ToggleGroup();
        Text CS454txt = new Text("2. Computer Graphics. Basic graphics principles and programming");
        RadioButton yes2 = new RadioButton("Yes");
        RadioButton no2 = new RadioButton("No");

        yes2.setToggleGroup(group2);
        no2.setToggleGroup(group2);
        layout4.getChildren().addAll(CS454txt, yes2, no2);

        //cs 440
        ToggleGroup group3 = new ToggleGroup();
        Text CS440txt = new Text("3. Language processors and Programming Environments. Topics include design and construction of language processors, formal syntactic definition methods, parsing techniques, and code-generation techniques.");
        CS440txt.setWrappingWidth(800);
        RadioButton yes3 = new RadioButton("Yes");
        RadioButton no3 = new RadioButton("No");

        yes3.setToggleGroup(group3);
        no3.setToggleGroup(group3);
        layout4.getChildren().addAll(CS440txt, yes3, no3);

        //cs 450
        ToggleGroup group4 = new ToggleGroup();
        Text CS450txt = new Text("4. Database Concepts(entity-relationship, entity-enhanced relationship, relational algebra, SQL, oracle database)");
        RadioButton yes4 = new RadioButton("Yes");
        RadioButton no4 = new RadioButton("No");

        yes4.setToggleGroup(group4);
        no4.setToggleGroup(group4);
        layout4.getChildren().addAll(CS450txt, yes4, no4);

        //cs 455
        ToggleGroup group5 = new ToggleGroup();
        Text CS455txt = new Text("5. Computer Communications and Networking. Internet protocol suite. Network performance");
        RadioButton yes5 = new RadioButton("Yes");
        RadioButton no5 = new RadioButton("No");

        yes5.setToggleGroup(group5);
        no5.setToggleGroup(group5);
        layout4.getChildren().addAll(CS455txt, yes5, no5);

        //cs 463
        ToggleGroup group6 = new ToggleGroup();
        Text CS463txt = new Text("6. Comparative programming languages. Programming mechanisms");
        RadioButton yes6 = new RadioButton("Yes");
        RadioButton no6 = new RadioButton("No");

        yes6.setToggleGroup(group6);
        no6.setToggleGroup(group6);
        layout4.getChildren().addAll(CS463txt, yes6, no6);

        //cs 465
        ToggleGroup group7 = new ToggleGroup();
        Text CS465txt = new Text("7. Computer Systems Architecture Memory hierarchy, cache, and virtual memory input-output processing");
        RadioButton yes7 = new RadioButton("Yes");
        RadioButton no7 = new RadioButton("No");

        yes7.setToggleGroup(group7);
        no7.setToggleGroup(group7);
        layout4.getChildren().addAll(CS465txt, yes7, no7);

        //cs 468
        ToggleGroup group8 = new ToggleGroup();
        Text CS468txt = new Text("8. Secure Programming and Systems. Topics include security and cryptography basics, vulnerability analysis, secure software development, and distributed system security");
        CS468txt.setWrappingWidth(800);
        RadioButton yes8 = new RadioButton("Yes");
        RadioButton no8 = new RadioButton("No");

        yes8.setToggleGroup(group8);
        no8.setToggleGroup(group8);
        layout4.getChildren().addAll(CS468txt, yes8, no8);

        //cs 469
        ToggleGroup group9 = new ToggleGroup();
        Text CS469txt = new Text("9. Security Engineering. Covers the software subsystems that are involved in defending computer systems");
        RadioButton yes9 = new RadioButton("Yes");
        RadioButton no9 = new RadioButton("No");

        yes9.setToggleGroup(group9);
        no9.setToggleGroup(group9);
        layout4.getChildren().addAll(CS469txt, yes9, no9);

        //cs 475
        ToggleGroup group10 = new ToggleGroup();
        Text CS475txt = new Text("10. Concurrent and Distributed Systems. Concurrent programming, synchronization, multithreading, local and wide-area network protocols");
        RadioButton yes10 = new RadioButton("Yes");
        RadioButton no10 = new RadioButton("No");

        yes10.setToggleGroup(group10);
        no10.setToggleGroup(group10);
        layout4.getChildren().addAll(CS475txt, yes10, no10);

        //cs 477
        ToggleGroup group11 = new ToggleGroup();
        Text CS477txt = new Text("11. Mobile Application Development. Teach principles of software development for the mobile device environment");
        RadioButton yes11 = new RadioButton("Yes");
        RadioButton no11 = new RadioButton("No");

        yes11.setToggleGroup(group11);
        no11.setToggleGroup(group11);
        layout4.getChildren().addAll(CS477txt, yes11, no11);

        //cs 480
        ToggleGroup group12 = new ToggleGroup();
        Text CS480txt = new Text("12. Game Programming I. Introduction to technologies and techniques used in modern computer games.");
        RadioButton yes12 = new RadioButton("Yes");
        RadioButton no12 = new RadioButton("No");

        yes12.setToggleGroup(group12);
        no12.setToggleGroup(group12);
        layout4.getChildren().addAll(CS480txt, yes12, no12);

        //cs 482
        ToggleGroup group13 = new ToggleGroup();
        Text CS482txt = new Text("13. Computer Vision. Basic principles of visual perception and their implementation on computer systems");
        RadioButton yes13 = new RadioButton("Yes");
        RadioButton no13 = new RadioButton("No");

        yes13.setToggleGroup(group13);
        no13.setToggleGroup(group13);
        layout4.getChildren().addAll(CS482txt, yes13, no13);

        //cs 484
        ToggleGroup group14 = new ToggleGroup();
        Text CS484txt = new Text("14. Data Mining. Principles and methods for data analysis and knowledge discovery");
        RadioButton yes14 = new RadioButton("Yes");
        RadioButton no14 = new RadioButton("No");

        yes14.setToggleGroup(group14);
        no14.setToggleGroup(group14);
        layout4.getChildren().addAll(CS484txt, yes14, no14);

        //cs 485
        ToggleGroup group15 = new ToggleGroup();
        Text CS485txt = new Text("15. Autonomous Robotics. Covers topics in autonomous robotics");
        RadioButton yes15 = new RadioButton("Yes");
        RadioButton no15 = new RadioButton("No");

        yes15.setToggleGroup(group15);
        no15.setToggleGroup(group15);
        layout4.getChildren().addAll(CS485txt, yes15, no15);

        //cs 490
        ToggleGroup group16 = new ToggleGroup();
        Text CS490txt = new Text("16. Design Exhibition. Capstone course, focuses on design and implementation of software");
        RadioButton yes16 = new RadioButton("Yes");
        RadioButton no16 = new RadioButton("No");

        yes16.setToggleGroup(group16);
        no16.setToggleGroup(group16);
        layout4.getChildren().addAll(CS490txt, yes16, no16);

        //cs 491
        ToggleGroup group17 = new ToggleGroup();
        Text CS491txt = new Text("17. Industry-sponsored senior design project. Focus on design and succesful implementation of software project");
        RadioButton yes17 = new RadioButton("Yes");
        RadioButton no17 = new RadioButton("No");

        yes17.setToggleGroup(group17);
        no17.setToggleGroup(group17);
        layout4.getChildren().addAll(CS491txt, yes17, no17);

        ////////

        layout4.setPadding(new Insets(10));
        layout4.setSpacing(5);

        Button button4 = new Button("Submit");
        layout4.getChildren().add(button4);

        Button cont4 = new Button("Continue");
        layout4.getChildren().add(cont4);
        cont4.setVisible(false);

        button4.setOnAction(
                e ->
                {

                    int counter = 0;
                    alert.setTitle("Error");
                    alert.setHeaderText("Make sure all the questions are answered");

                    //q1
                    ToggleButton result1 = (ToggleButton) group1.getSelectedToggle();
                    if (result1 == null){
                        wantToTake.clear();
                        alert.setContentText("Please answer Question 1");
                        alert.showAndWait();
                    }
                    else{
                        if(yes1.isSelected() ==  true){
                            wantToTake.add("CS 425");
                            counter++;
                        }
                        else
                            counter++;
                    }

                    //q2
                    ToggleButton result2 = (ToggleButton) group2.getSelectedToggle();
                    if (result2 == null){
                        wantToTake.clear();
                        alert.setContentText("Please answer Question 2");
                        alert.showAndWait();
                    }
                    else{
                        if(yes2.isSelected() ==  true){
                            wantToTake.add("CS 454");
                            counter++;
                        }
                        else
                            counter++;
                    }
                    //q3
                    ToggleButton result3 = (ToggleButton) group3.getSelectedToggle();
                    if (result3 == null){
                        wantToTake.clear();
                        alert.setContentText("Please answer Question 3");
                        alert.showAndWait();
                    }
                    else{
                        if(yes3.isSelected() ==  true){
                            wantToTake.add("CS 440");
                            counter++;
                        }
                        else
                            counter++;
                    }

                    //q4
                    ToggleButton result4 = (ToggleButton) group4.getSelectedToggle();
                    if (result4 == null){
                        wantToTake.clear();
                        alert.setContentText("Please answer Question 4");
                        alert.showAndWait();
                    }
                    else{
                        if(yes4.isSelected() ==  true){
                            wantToTake.add("CS 450");
                            counter++;
                        }
                        else
                            counter++;
                    }

                    //q5
                    ToggleButton result5 = (ToggleButton) group5.getSelectedToggle();
                    if (result5 == null){
                        wantToTake.clear();
                        alert.setContentText("Please answer Question 5");
                        alert.showAndWait();
                    }
                    else{
                        if(yes5.isSelected() ==  true){
                            wantToTake.add("CS 455");
                            counter++;
                        }
                        else
                            counter++;
                    }

                    //q6
                    ToggleButton result6 = (ToggleButton) group6.getSelectedToggle();
                    if (result6 == null){
                        wantToTake.clear();
                        alert.setContentText("Please answer Question 6");
                        alert.showAndWait();
                    }
                    else{
                        if(yes6.isSelected() ==  true){
                            wantToTake.add("CS 463");
                            counter++;
                        }
                        else
                            counter++;
                    }


                    //q7
                    ToggleButton result7 = (ToggleButton) group7.getSelectedToggle();
                    if (result7 == null){
                        wantToTake.clear();
                        alert.setContentText("Please answer Question 7");
                        alert.showAndWait();
                    }
                    else{
                        if(yes7.isSelected() ==  true){
                            wantToTake.add("CS 465");
                            counter++;
                        }
                        else
                            counter++;
                    }

                    //q8
                    ToggleButton result8 = (ToggleButton) group8.getSelectedToggle();
                    if (result8 == null){
                        wantToTake.clear();
                        alert.setContentText("Please answer Question 8");
                        alert.showAndWait();
                    }
                    else{
                        if(yes8.isSelected() ==  true){
                            wantToTake.add("CS 468");
                            counter++;
                        }
                        else
                            counter++;
                    }

                    //q9
                    ToggleButton result9 = (ToggleButton) group9.getSelectedToggle();
                    if (result9 == null){
                        wantToTake.clear();
                        alert.setContentText("Please answer Question 9");
                        alert.showAndWait();
                    }
                    else{
                        if(yes9.isSelected() ==  true){
                            wantToTake.add("CS 469");
                            counter++;
                        }
                        else
                            counter++;
                    }
                    //q10
                    ToggleButton result10 = (ToggleButton) group10.getSelectedToggle();
                    if (result10 == null){
                        wantToTake.clear();
                        alert.setContentText("Please answer Question 10");
                        alert.showAndWait();
                    }
                    else{
                        if(yes10.isSelected() ==  true){
                            wantToTake.add("CS 475");
                            counter++;
                        }
                        else
                            counter++;
                    }

                    //q11
                    ToggleButton result11 = (ToggleButton) group11.getSelectedToggle();
                    if (result11 == null){
                        wantToTake.clear();
                        alert.setContentText("Please answer Question 11");
                        alert.showAndWait();
                    }
                    else{
                        if(yes11.isSelected() ==  true){
                            wantToTake.add("CS 477");
                            counter++;
                        }
                        else
                            counter++;
                    }
                    //q12
                    ToggleButton result12 = (ToggleButton) group12.getSelectedToggle();
                    if (result12 == null){
                        wantToTake.clear();
                        alert.setContentText("Please answer Question 12");
                        alert.showAndWait();
                    }
                    else{
                        if(yes12.isSelected() ==  true){
                            wantToTake.add("CS 480");
                            counter++;
                        }
                        else
                            counter++;
                    }
                    //q13
                    ToggleButton result13 = (ToggleButton) group13.getSelectedToggle();
                    if (result13 == null){
                        wantToTake.clear();
                        alert.setContentText("Please answer Question 13");
                        alert.showAndWait();
                    }
                    else{
                        if(yes13.isSelected() ==  true){
                            wantToTake.add("CS 482");
                            counter++;
                        }
                        else
                            counter++;
                    }

                    //q14
                    ToggleButton result14 = (ToggleButton) group14.getSelectedToggle();
                    if (result14 == null){
                        wantToTake.clear();
                        alert.setContentText("Please answer Question 14");
                        alert.showAndWait();
                    }
                    else{
                        if(yes14.isSelected() ==  true){
                            wantToTake.add("CS 484");
                            counter++;
                        }
                        else
                            counter++;
                    }

                    //q15
                    ToggleButton result15 = (ToggleButton) group15.getSelectedToggle();
                    if (result15 == null){
                        wantToTake.clear();
                        alert.setContentText("Please answer Question 15");
                        alert.showAndWait();
                    }
                    else{
                        if(yes15.isSelected() ==  true){
                            wantToTake.add("CS 485");
                            counter++;
                        }
                        else
                            counter++;
                    }

                    //q16
                    ToggleButton result16 = (ToggleButton) group16.getSelectedToggle();
                    if (result16 == null){
                        wantToTake.clear();
                        alert.setContentText("Please answer Question 16");
                        alert.showAndWait();
                    }
                    else{
                        if(yes16.isSelected() ==  true){
                            wantToTake.add("CS 490");
                            counter++;
                        }
                        else
                            counter++;
                    }

                    //q17
                    ToggleButton result17 = (ToggleButton) group17.getSelectedToggle();
                    if (result17 == null){
                        wantToTake.clear();
                        alert.setContentText("Please answer Question 17");
                        alert.showAndWait();
                    }
                    else{
                        if(yes17.isSelected() ==  true){
                            wantToTake.add("CS 491");
                            counter++;
                        }
                        else
                            counter++;
                    }

                    //continue button
                    if(counter == 17){
                        cont4.setVisible(true);
                        button4.setVisible(false);
                    }
                });

        cont4.setOnAction(
                e -> {
                    wantToTake.addAll(scene3Input);
                    primaryStage.setScene(scene5);
                });

        logo4.setOnAction(
                e -> {
                    classList.addAll(selected);
                    Collections.sort(classList);
                    selected.clear();
                    canTake.clear();
                    cont1.setVisible(false);
                    check.setVisible(true);
                    button3.setVisible(true);
                    cont.setVisible(false);
                    CSTcp.setSelected(false);
                    CSCryp.setSelected(false);
                    CSSysInteg.setSelected(false);
                    cont4.setVisible(false);
                    button4.setVisible(true);

                    yes1.setSelected(false);
                    no1.setSelected(false);

                    yes2.setSelected(false);
                    no2.setSelected(false);

                    yes3.setSelected(false);
                    no3.setSelected(false);

                    yes4.setSelected(false);
                    no4.setSelected(false);

                    yes5.setSelected(false);
                    no5.setSelected(false);

                    yes6.setSelected(false);
                    no6.setSelected(false);

                    yes7.setSelected(false);
                    no7.setSelected(false);

                    yes8.setSelected(false);
                    no8.setSelected(false);

                    yes9.setSelected(false);
                    no9.setSelected(false);

                    yes10.setSelected(false);
                    no10.setSelected(false);

                    yes11.setSelected(false);
                    no11.setSelected(false);

                    yes12.setSelected(false);
                    no12.setSelected(false);

                    yes13.setSelected(false);
                    no13.setSelected(false);

                    yes14.setSelected(false);
                    no14.setSelected(false);

                    yes15.setSelected(false);
                    no15.setSelected(false);

                    yes16.setSelected(false);
                    no16.setSelected(false);

                    yes17.setSelected(false);
                    no17.setSelected(false);
                    wantToTake.clear();
                    scene3Input.clear();




                    primaryStage.close();
                    primaryStage.setScene(scene1);
                    primaryStage.show();

                });

        root41.setTop(top4);
        root41.setBottom(logo4Box);
        root41.setCenter(root4);

        scene4 = new Scene(root41, 1250, 650);



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Scene 5: Class Output
        //Scene 5: Class Output
        BorderPane p = new BorderPane();

        FlowPane f = new FlowPane();
        f.setPadding(new Insets(10, 10, 10, 10));
        f.setStyle("-fx-background-color: #1e6e17;");
        f.setHgap(5);

        Text summary = new Text("The results are in! \n");
        Font ft = Font.font("Verdana", FontWeight.BOLD, 25);
        summary.setFont(ft);
        summary.setFill(Color.WHITE);

        Label labelresponse= new Label();

        VBox layout5 = new VBox();
        layout5.getChildren().add(summary);
        f.getChildren().addAll(layout5);

        VBox layout6 = new VBox(20);
        Text firstResults = new Text("Next semester, you can take the following required courses: ");
        Font f2 = Font.font("Verdana", FontWeight.BOLD,15);
        firstResults.setFont(f2);
        firstResults.setFill(Color.DARKGREEN);
        layout6.getChildren().add(firstResults);

        ListView<String> theList = new ListView<>(canTake);
        theList.setOrientation(Orientation.VERTICAL);
        theList.setPrefSize(120,200);
        layout6.getChildren().add(theList);
        f.getChildren().addAll(layout6);

        Text secondResults = new Text("According to your interests, we recommend you take the following electives: ");
        Font f3 = Font.font("Verdana", 15);
        secondResults.setFont(f3);
        layout6.getChildren().add(secondResults);

        ListView<String> interestList = new ListView<>(wantToTake);
        interestList.setOrientation(Orientation.VERTICAL);
        interestList.setPrefSize(120,200);
        layout6.getChildren().add(interestList);

        HBox logo5Box = new HBox();
        logo5Box.setPadding(new Insets(15, 12, 15, 12));
        logo5Box.setPrefHeight(200);
        logo5Box.setSpacing(5);
        logo5Box.setStyle("-fx-background-color: #1e6e17;");

        Image image5 = new Image(imageUrl,110,95,false,true);
        ImageView imageView5 = new ImageView(image5);
        Button logo5 = new Button("",imageView5);
        logo5.setStyle("-fx-background-color: white");
        logo5Box.setAlignment(Pos.CENTER_RIGHT);
        logo5Box.getChildren().add(logo5);

        logo5.setOnAction(e -> {
            classList.addAll(selected);
            Collections.sort(classList);
            selected.clear();
            canTake.clear();
            cont1.setVisible(false);
            check.setVisible(true);
            button3.setVisible(true);
            cont.setVisible(false);
            CSTcp.setSelected(false);
            CSCryp.setSelected(false);
            CSSysInteg.setSelected(false);
            cont4.setVisible(false);
            button4.setVisible(true);

            yes1.setSelected(false);
            no1.setSelected(false);

            yes2.setSelected(false);
            no2.setSelected(false);

            yes3.setSelected(false);
            no3.setSelected(false);

            yes4.setSelected(false);
            no4.setSelected(false);

            yes5.setSelected(false);
            no5.setSelected(false);

            yes6.setSelected(false);
            no6.setSelected(false);

            yes7.setSelected(false);
            no7.setSelected(false);

            yes8.setSelected(false);
            no8.setSelected(false);

            yes9.setSelected(false);
            no9.setSelected(false);

            yes10.setSelected(false);
            no10.setSelected(false);

            yes11.setSelected(false);
            no11.setSelected(false);

            yes12.setSelected(false);
            no12.setSelected(false);

            yes13.setSelected(false);
            no13.setSelected(false);

            yes14.setSelected(false);
            no14.setSelected(false);

            yes15.setSelected(false);
            no15.setSelected(false);

            yes16.setSelected(false);
            no16.setSelected(false);

            yes17.setSelected(false);
            no17.setSelected(false);

            wantToTake.clear();
            scene3Input.clear();
            primaryStage.close();
            primaryStage.setScene(scene1);
            primaryStage.setResizable(true);
            primaryStage.show();

        });


        p.setTop(f);
        p.setCenter(layout6);
        p.setBottom(logo5Box);
        scene5 = new Scene(p, 1300, 650);




        primaryStage.setScene(scene1);
        primaryStage.show();
    }
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


    public boolean validateClasses(){
        for(Course c : hasTaken.getList())
            if(!c.hasPreReqs(hasTaken)){

                alertBox.setTitle("Class Selection Error");
                alertBox.setHeaderText("Missing Prerequisite Classes");
                alertBox.setContentText("Use the Resource Class List to check all the correct corresponding classes are selected. ");
                alertBox.showAndWait();
                isValidInput = false;
                hasTaken.clear();
                return false;}
        isValidInput = true;
        return true;}

    public static void main(String[] args) {
        launch(args);
    }
}
